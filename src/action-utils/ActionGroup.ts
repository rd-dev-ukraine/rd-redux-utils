import { Action, Reducer } from "redux";
import { ActionCreatorFn } from "./defineAction";
import { StateHash } from "reducer-utils";

/**
 * Action group creates a factory which allows
 * to define action creators with common properties.
 */
export interface ActionGroup<TCommonProps, TExtraActions extends Action = never> {
    /** A prefix of actions created by the group or child groups. */
    readonly TYPE_PREFIX: string;

    /**
     * Defines action creators which generates actions recognized by this group.
     */
    defineAction<TProps>(type: string): ActionCreatorFn<TCommonProps & TProps>;

    /** Checks if action belongs to the action group or child groups. */
    isGroupAction(action?: Action): action is (TCommonProps & Action) | TExtraActions;

    /** Check if action belongs to exactly this group but not child groups */
    isExactlyGroupAction(action?: Action): action is (TCommonProps & Action) | TExtraActions;

    /** Tries to get data from the actions of this group or included actions. */
    tryExtractData(action?: Action): TCommonProps | undefined;

    /**
     * Defines nested action group.
     */
    defineActionGroup<TNestedProps>(typePrefix: string): ActionGroup<TCommonProps & TNestedProps, TExtraActions>;

    /**
     * Adds a custom action to a group.
     * Added action will be recognized by the `is` method of the group
     * and will be processed by the reducers generated by this action group.
     */
    includeAction<TAction extends Action>(
        test: (action: Action) => action is TAction,
        extractProps: (action: TAction) => TCommonProps | true
    ): ActionGroup<TCommonProps, TExtraActions | TAction>;

    /**
     * Creates a hash reducer function which processes the actions of this group and subgroups.
     */
    hashedReducer<TState>(
        keySelector: (props: TCommonProps) => string,
        elementReducer: Reducer<TState>
    ): Reducer<StateHash<TState>>;

    indexedReducer<TState>(
        indexSelector: (props: TCommonProps) => number,
        elementReducer: Reducer<TState>
    ): Reducer<TState[]>;
}
